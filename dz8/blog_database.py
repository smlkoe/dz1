import sqlite3
from datetime import datetime

def create_blog_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü –¥–ª—è –±–ª–æ–≥–∞"""
    conn = sqlite3.connect('blog.db')
    cursor = conn.cursor()

    try:
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL UNIQUE,
                email TEXT NOT NULL UNIQUE,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS categories (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL UNIQUE,
                description TEXT
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Å—Ç–æ–≤ (—Å –≤–Ω–µ—à–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS posts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT NOT NULL,
                content TEXT NOT NULL,
                user_id INTEGER NOT NULL,
                category_id INTEGER NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
                FOREIGN KEY (category_id) REFERENCES categories (id)
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS comments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                text TEXT NOT NULL,
                post_id INTEGER NOT NULL,
                user_id INTEGER NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (post_id) REFERENCES posts (id) ON DELETE CASCADE,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
        """)
        
        # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
        cursor.execute("PRAGMA foreign_keys = ON")
        
        conn.commit()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–≥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        
    except sqlite3.Error as e:
        conn.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ë–î: {e}")
    finally:
        conn.close()

def add_user(username, email):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('blog.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute("""
            INSERT INTO users (username, email) 
            VALUES (?, ?)
        """, (username, email))
        
        conn.commit()
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        return cursor.lastrowid
    except sqlite3.IntegrityError:
        print(f"‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –∏–ª–∏ email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return None
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None
    finally:
        conn.close()

def add_category(name, description=None):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    conn = sqlite3.connect('blog.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute("""
            INSERT INTO categories (name, description) 
            VALUES (?, ?)
        """, (name, description))
        
        conn.commit()
        print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        return cursor.lastrowid
    except sqlite3.IntegrityError:
        print(f"‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return None
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        return None
    finally:
        conn.close()

def create_post(title, content, user_id, category_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞"""
    conn = sqlite3.connect('blog.db')
    cursor = conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT id FROM users WHERE id = ?", (user_id,))
        if not cursor.fetchone():
            print(f"‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        cursor.execute("SELECT id FROM categories WHERE id = ?", (category_id,))
        if not cursor.fetchone():
            print(f"‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID {category_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return None
        
        cursor.execute("""
            INSERT INTO posts (title, content, user_id, category_id) 
            VALUES (?, ?, ?, ?)
        """, (title, content, user_id, category_id))
        
        conn.commit()
        print(f"‚úÖ –ü–æ—Å—Ç '{title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        return cursor.lastrowid
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        return None
    finally:
        conn.close()

def add_comment(text, post_id, user_id):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–æ—Å—Ç—É"""
    conn = sqlite3.connect('blog.db')
    cursor = conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
        cursor.execute("SELECT id FROM posts WHERE id = ?", (post_id,))
        if not cursor.fetchone():
            print(f"‚ùå –û—à–∏–±–∫–∞: –ø–æ—Å—Ç —Å ID {post_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT id FROM users WHERE id = ?", (user_id,))
        if not cursor.fetchone():
            print(f"‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return None
        
        cursor.execute("""
            INSERT INTO comments (text, post_id, user_id) 
            VALUES (?, ?, ?)
        """, (text, post_id, user_id))
        
        conn.commit()
        print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        return cursor.lastrowid
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        return None
    finally:
        conn.close()

def get_all_posts_with_authors():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ —Å –∏–º–µ–Ω–∞–º–∏ –∞–≤—Ç–æ—Ä–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (–∏—Å–ø–æ–ª—å–∑—É—è JOIN)"""
    conn = sqlite3.connect('blog.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute("""
            SELECT 
                p.id,
                p.title,
                p.content,
                p.created_at,
                u.username as author,
                c.name as category
            FROM posts p
            JOIN users u ON p.user_id = u.id
            JOIN categories c ON p.category_id = c.id
            ORDER BY p.created_at DESC
        """)
        
        posts = cursor.fetchall()
        
        print("\n" + "="*80)
        print("üìù –í–°–ï –ü–û–°–¢–´ –í –ë–õ–û–ì–ï")
        print("="*80)
        
        if not posts:
            print("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞")
            return []
        
        for post in posts:
            post_id, title, content, created_at, author, category = post
            print(f"\nüè∑Ô∏è  ID: {post_id}")
            print(f"üìñ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
            print(f"üìù –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {content[:100]}..." if len(content) > 100 else f"üìù –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {content}")
            print(f"üë§ –ê–≤—Ç–æ—Ä: {author}")
            print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
            print(f"üìÖ –î–∞—Ç–∞: {created_at}")
            print("-" * 80)
        
        return posts
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤: {e}")
        return []
    finally:
        conn.close()

def get_posts_with_comments():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ –∞–≤—Ç–æ—Ä–∞–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    conn = sqlite3.connect('blog.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute("""
            SELECT 
                p.id as post_id,
                p.title as post_title,
                u1.username as post_author,
                c.text as comment_text,
                u2.username as comment_author,
                c.created_at as comment_date
            FROM posts p
            JOIN users u1 ON p.user_id = u1.id
            LEFT JOIN comments c ON p.id = c.post_id
            LEFT JOIN users u2 ON c.user_id = u2.id
            ORDER BY p.created_at DESC, c.created_at ASC
        """)
        
        results = cursor.fetchall()
        
        print("\n" + "="*80)
        print("üí¨ –ü–û–°–¢–´ –° –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø–ú–ò")
        print("="*80)
        
        current_post = None
        for row in results:
            post_id, post_title, post_author, comment_text, comment_author, comment_date = row
            
            if current_post != post_id:
                current_post = post_id
                print(f"\nüìñ –ü–æ—Å—Ç: '{post_title}' (–∞–≤—Ç–æ—Ä: {post_author})")
                print("-" * 40)
            
            if comment_text:
                print(f"   üí≠ {comment_author}: {comment_text}")
                print(f"   üìÖ {comment_date}")
            else:
                print("   üí≠ –ü–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
        
        return results
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏: {e}")
        return []
    finally:
        conn.close()

def get_users_with_post_count():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏—Ö –ø–æ—Å—Ç–æ–≤"""
    conn = sqlite3.connect('blog.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute("""
            SELECT 
                u.id,
                u.username,
                u.email,
                COUNT(p.id) as post_count
            FROM users u
            LEFT JOIN posts p ON u.id = p.user_id
            GROUP BY u.id, u.username, u.email
            ORDER BY post_count DESC
        """)
        
        users = cursor.fetchall()
        
        print("\n" + "="*50)
        print("üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ò –ò–• –ê–ö–¢–ò–í–ù–û–°–¢–¨")
        print("="*50)
        
        for user in users:
            user_id, username, email, post_count = user
            print(f"üë§ {username} ({email}) - –ø–æ—Å—Ç–æ–≤: {post_count}")
        
        return users
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []
    finally:
        conn.close()

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
def demo_blog_system():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –±–ª–æ–≥–∞"""
    print("üöÄ –ó–ê–ü–£–°–ö –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò –°–ò–°–¢–ï–ú–´ –ë–õ–û–ì–ê")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    create_blog_database()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("\n1. –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:")
    user1_id = add_user("alex_dev", "alex@example.com")
    user2_id = add_user("maria_writer", "maria@example.com")
    user3_id = add_user("tech_guru", "tech@example.com")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    print("\n2. –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ô:")
    cat1_id = add_category("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–°—Ç–∞—Ç—å–∏ –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ü–û")
    cat2_id = add_category("–î–∏–∑–∞–π–Ω", "UI/UX –¥–∏–∑–∞–π–Ω –∏ –≥—Ä–∞—Ñ–∏–∫–∞")
    cat3_id = add_category("–ù–∞—É–∫–∞", "–ù–∞—É—á–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç—ã
    print("\n3. –°–û–ó–î–ê–ù–ò–ï –ü–û–°–¢–û–í:")
    post1_id = create_post(
        "–û—Å–Ω–æ–≤—ã Python –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö", 
        "Python - —ç—Ç–æ –º–æ—â–Ω—ã–π –∏ –ø—Ä–æ—Å—Ç–æ–π –≤ –∏–∑—É—á–µ–Ω–∏–∏ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è...", 
        user1_id, cat1_id
    )
    
    post2_id = create_post(
        "–ü—Ä–∏–Ω—Ü–∏–ø—ã —Ö–æ—Ä–æ—à–µ–≥–æ UI –¥–∏–∑–∞–π–Ω–∞", 
        "–•–æ—Ä–æ—à–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–º...", 
        user2_id, cat2_id
    )
    
    post3_id = create_post(
        "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ", 
        "AI —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—é—Ç—Å—è –∏ –º–µ–Ω—è—é—Ç –Ω–∞—à—É –∂–∏–∑–Ω—å...", 
        user3_id, cat3_id
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    print("\n4. –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í:")
    add_comment("–û—Ç–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç—å—è –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤!", post1_id, user2_id)
    add_comment("–°–ø–∞—Å–∏–±–æ, –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω–æ!", post1_id, user3_id)
    add_comment("–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–¥–µ–∏ –ø–æ –¥–∏–∑–∞–π–Ω—É", post2_id, user1_id)
    add_comment("–ñ–¥—É –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç–µ–º—ã –ø—Ä–æ AI", post3_id, user2_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n5. –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    get_all_posts_with_authors()
    get_posts_with_comments()
    get_users_with_post_count()

# –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
if __name__ == "__main__":
    demo_blog_system()


def homework_functions():
    """–§—É–Ω–∫—Ü–∏–∏, —Ç—Ä–µ–±—É–µ–º—ã–µ –≤ –¥–æ–º–∞—à–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏"""
    
    # 1. –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤—ã—à–µ)
    print("1. –§—É–Ω–∫—Ü–∏—è add_user - —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ ‚úì")
    
    # 2. –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ (—É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤—ã—à–µ)
    print("2. –§—É–Ω–∫—Ü–∏—è create_post - —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ ‚úì")
    
    # 3. –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ —Å –∏–º–µ–Ω–∞–º–∏ –∞–≤—Ç–æ—Ä–æ–≤ (—É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤—ã—à–µ)
    print("3. –§—É–Ω–∫—Ü–∏—è get_all_posts_with_authors - —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ ‚úì")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    print("\n" + "="*50)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –û–°–ù–û–í–ù–´–• –§–£–ù–ö–¶–ò–ô")
    print("="*50)
    
    create_blog_database()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_id = add_user("test_user", "test@example.com")
    category_id = add_category("–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
    
    if user_id and category_id:
        post_id = create_post(
            "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç", 
            "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π.", 
            user_id, category_id
        )
        
        if post_id:
            add_comment("–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", post_id, user_id)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã —Å JOIN
            get_all_posts_with_authors()

# –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
if __name__ == "__main__":
    homework_functions()