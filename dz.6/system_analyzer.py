#!/usr/bin/env python3
"""
System Analyzer - –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
–¢—Ä–µ–±—É–µ—Ç –∑–∞–ø—É—Å–∫–∞ –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
"""

import subprocess
import json
import platform
import os
from datetime import datetime

class SystemAnalyzer:
    def __init__(self):
        self.report_data = {}
        self.is_admin = self.check_admin_privileges()
    
    def check_admin_privileges(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            # –î–ª—è Windows
            if platform.system() == "Windows":
                import ctypes
                return ctypes.windll.shell32.IsUserAnAdmin()
            # –î–ª—è Linux/Mac
            else:
                return os.geteuid() == 0
        except:
            return False
    
    def get_desktop_path(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ —Ä–∞–±–æ—á–µ–º—É —Å—Ç–æ–ª—É"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å
            desktop = os.path.join(os.path.expanduser("~"), "Desktop")
            if os.path.exists(desktop):
                return desktop
            
            # –ü—Ä–æ–±—É–µ–º –ø—É—Ç—å OneDrive
            onedrive_desktop = os.path.join(os.path.expanduser("~"), "OneDrive", "Desktop")
            if os.path.exists(onedrive_desktop):
                return onedrive_desktop
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            if "ONEDRIVE" in os.environ:
                onedrive_desktop2 = os.path.join(os.environ["ONEDRIVE"], "Desktop")
                if os.path.exists(onedrive_desktop2):
                    return onedrive_desktop2
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–º–∞—à–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            return os.path.expanduser("~")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø—É—Ç–∏ –∫ —Ä–∞–±–æ—á–µ–º—É —Å—Ç–æ–ª—É: {e}")
            return os.path.expanduser("~")
    
    def run_powershell_command(self, command):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ PowerShell –∫–æ–º–∞–Ω–¥—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        try:
            result = subprocess.run(
                ["powershell", "-Command", command],
                capture_output=True,
                text=True,
                check=True,
                encoding='utf-8'
            )
            return result.stdout.strip()
        except subprocess.CalledProcessError as e:
            return f"–û—à–∏–±–∫–∞: {e}"
    
    def get_general_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º systeminfo –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        try:
            system_info = subprocess.run(
                ["systeminfo"], 
                capture_output=True, 
                text=True, 
                check=True,
                encoding='utf-8'
            )
            info_lines = system_info.stdout.split('\n')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            os_name = next((line.split(":")[1].strip() for line in info_lines if "OS Name" in line), "N/A")
            os_version = next((line.split(":")[1].strip() for line in info_lines if "OS Version" in line), "N/A")
            processor = next((line.split(":")[1].strip() for line in info_lines if "Processor(s)" in line), "N/A")
            total_ram = next((line.split(":")[1].strip() for line in info_lines if "Total Physical Memory" in line), "N/A")
            
            self.report_data['general_info'] = {
                'OS Name': os_name,
                'OS Version': os_version,
                'Processor': processor,
                'Total RAM': total_ram,
                'Architecture': platform.architecture()[0],
                'Python Version': platform.python_version(),
                'System': platform.system(),
                'Release': platform.release()
            }
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            self.report_data['general_info'] = {
                'OS Name': platform.system(),
                'OS Version': platform.release(),
                'Processor': 'N/A',
                'Total RAM': 'N/A',
                'Architecture': platform.architecture()[0],
                'Python Version': platform.python_version()
            }
    
    def get_cpu_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ"""
        print("üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
        
        command = """
        Get-CimInstance -ClassName Win32_Processor | Select-Object Name, NumberOfCores, NumberOfLogicalProcessors, MaxClockSpeed, Manufacturer | ConvertTo-Json
        """
        
        result = self.run_powershell_command(command)
        if result and not result.startswith("–û—à–∏–±–∫–∞"):
            try:
                cpu_info = json.loads(result) if result.startswith('[') else [json.loads(result)]
                self.report_data['cpu_info'] = cpu_info
            except json.JSONDecodeError as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {e}")
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ
                self.report_data['cpu_info'] = [{
                    'Name': platform.processor(),
                    'NumberOfCores': 'N/A',
                    'NumberOfLogicalProcessors': 'N/A',
                    'MaxClockSpeed': 'N/A',
                    'Manufacturer': 'N/A'
                }]
    
    def get_ram_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏"""
        print("üîç –ê–Ω–∞–ª–∏–∑ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏...")
        
        command = """
        Get-CimInstance -ClassName Win32_PhysicalMemory | Select-Object Manufacturer, Capacity, Speed, MemoryType, PartNumber | ConvertTo-Json
        """
        
        result = self.run_powershell_command(command)
        if result and not result.startswith("–û—à–∏–±–∫–∞"):
            try:
                ram_info = json.loads(result) if result.startswith('[') else [json.loads(result)]
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Capacity –≤ GB
                for module in ram_info:
                    if 'Capacity' in module and module['Capacity']:
                        module['Capacity_GB'] = round(module['Capacity'] / (1024**3), 2)
                
                self.report_data['ram_info'] = ram_info
            except json.JSONDecodeError as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞–º—è—Ç–∏: {e}")
                self.report_data['ram_info'] = []
        else:
            self.report_data['ram_info'] = []
    
    def get_disk_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—è—Ö"""
        print("üîç –ê–Ω–∞–ª–∏–∑ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–µ–π...")
        
        command = """
        Get-CimInstance -ClassName Win32_DiskDrive | Select-Object Model, Size, InterfaceType, MediaType, SerialNumber | ConvertTo-Json
        """
        
        result = self.run_powershell_command(command)
        if result and not result.startswith("–û—à–∏–±–∫–∞"):
            try:
                disk_info = json.loads(result) if result.startswith('[') else [json.loads(result)]
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Size –≤ GB
                for disk in disk_info:
                    if 'Size' in disk and disk['Size']:
                        disk['Size_GB'] = round(disk['Size'] / (1024**3), 2)
                
                self.report_data['disk_info'] = disk_info
            except json.JSONDecodeError as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∏—Å–∫–æ–≤: {e}")
                self.report_data['disk_info'] = []
        else:
            self.report_data['disk_info'] = []
    
    def get_gpu_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞—Ö"""
        print("üîç –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç...")
        
        command = """
        Get-CimInstance -ClassName Win32_VideoController | Where-Object {$_.Name -notlike "*Remote*" -and $_.Name -notlike "*Microsoft*"} | Select-Object Name, DriverVersion, AdapterRAM, VideoProcessor | ConvertTo-Json
        """
        
        result = self.run_powershell_command(command)
        if result and not result.startswith("–û—à–∏–±–∫–∞"):
            try:
                gpu_info = json.loads(result) if result.startswith('[') else [json.loads(result)]
                self.report_data['gpu_info'] = gpu_info
            except json.JSONDecodeError as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ–∫–∞—Ä—Ç: {e}")
                self.report_data['gpu_info'] = []
        else:
            self.report_data['gpu_info'] = []
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ä–∞–±–æ—á–µ–º—É —Å—Ç–æ–ª—É
        desktop_path = self.get_desktop_path()
        report_path = os.path.join(desktop_path, "MyPC_Report.txt")
        
        try:
            with open(report_path, 'w', encoding='utf-8') as f:
                f.write("=== –û–¢–ß–ï–¢ –û –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –°–ò–°–¢–ï–ú–´ ===\n")
                f.write(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {'–î–∞' if self.is_admin else '–ù–µ—Ç'}\n")
                f.write(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}\n\n")
                
                # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                if 'general_info' in self.report_data:
                    f.write("--- –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï ---\n")
                    for key, value in self.report_data['general_info'].items():
                        f.write(f"{key}: {value}\n")
                    f.write("\n")
                
                # –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä
                if 'cpu_info' in self.report_data and self.report_data['cpu_info']:
                    f.write("--- –ü–†–û–¶–ï–°–°–û–† (CPU) ---\n")
                    for cpu in self.report_data['cpu_info']:
                        f.write(f"–ú–æ–¥–µ–ª—å: {cpu.get('Name', 'N/A')}\n")
                        f.write(f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {cpu.get('Manufacturer', 'N/A')}\n")
                        f.write(f"–§–∏–∑–∏—á–µ—Å–∫–∏–µ —è–¥—Ä–∞: {cpu.get('NumberOfCores', 'N/A')}\n")
                        f.write(f"–õ–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã: {cpu.get('NumberOfLogicalProcessors', 'N/A')}\n")
                        f.write(f"–ú–∞–∫—Å. —á–∞—Å—Ç–æ—Ç–∞: {cpu.get('MaxClockSpeed', 'N/A')} –ú–ì—Ü\n\n")
                
                # –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å
                if 'ram_info' in self.report_data and self.report_data['ram_info']:
                    f.write("--- –û–ü–ï–†–ê–¢–ò–í–ù–ê–Ø –ü–ê–ú–Ø–¢–¨ (RAM) ---\n")
                    total_ram_gb = 0
                    for i, ram in enumerate(self.report_data['ram_info'], 1):
                        f.write(f"–ú–æ–¥—É–ª—å {i}:\n")
                        f.write(f"  –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {ram.get('Manufacturer', 'N/A')}\n")
                        f.write(f"  –û–±—ä–µ–º: {ram.get('Capacity_GB', 'N/A')} GB\n")
                        f.write(f"  –°–∫–æ—Ä–æ—Å—Ç—å: {ram.get('Speed', 'N/A')} –ú–ì—Ü\n")
                        f.write(f"  –¢–∏–ø –ø–∞–º—è—Ç–∏: {ram.get('MemoryType', 'N/A')}\n")
                        f.write(f"  Part Number: {ram.get('PartNumber', 'N/A')}\n")
                        if 'Capacity_GB' in ram and ram['Capacity_GB']:
                            total_ram_gb += ram['Capacity_GB']
                    
                    if total_ram_gb > 0:
                        f.write(f"\n–û–±—â–∏–π –æ–±—ä–µ–º RAM: {total_ram_gb} GB\n")
                    f.write("\n")
                else:
                    f.write("--- –û–ü–ï–†–ê–¢–ò–í–ù–ê–Ø –ü–ê–ú–Ø–¢–¨ (RAM) ---\n")
                    f.write("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n")
                
                # –ù–∞–∫–æ–ø–∏—Ç–µ–ª–∏
                if 'disk_info' in self.report_data and self.report_data['disk_info']:
                    f.write("--- –ù–ê–ö–û–ü–ò–¢–ï–õ–ò (HDD/SSD) ---\n")
                    for disk in self.report_data['disk_info']:
                        f.write(f"–ú–æ–¥–µ–ª—å: {disk.get('Model', 'N/A')}\n")
                        f.write(f"–û–±—ä–µ–º: {disk.get('Size_GB', 'N/A')} GB\n")
                        f.write(f"–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {disk.get('InterfaceType', 'N/A')}\n")
                        f.write(f"–¢–∏–ø –Ω–æ—Å–∏—Ç–µ–ª—è: {disk.get('MediaType', 'N/A')}\n")
                        f.write(f"–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {disk.get('SerialNumber', 'N/A')}\n\n")
                else:
                    f.write("--- –ù–ê–ö–û–ü–ò–¢–ï–õ–ò (HDD/SSD) ---\n")
                    f.write("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n")
                
                # –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã
                if 'gpu_info' in self.report_data and self.report_data['gpu_info']:
                    f.write("--- –í–ò–î–ï–û–ö–ê–†–¢–´ (GPU) ---\n")
                    for gpu in self.report_data['gpu_info']:
                        f.write(f"–ú–æ–¥–µ–ª—å: {gpu.get('Name', 'N/A')}\n")
                        f.write(f"–í–µ—Ä—Å–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞: {gpu.get('DriverVersion', 'N/A')}\n")
                        ram_gb = round(gpu.get('AdapterRAM', 0) / (1024**3), 2) if gpu.get('AdapterRAM') else "N/A"
                        f.write(f"–í–∏–¥–µ–æ–ø–∞–º—è—Ç—å: {ram_gb} GB\n")
                        f.write(f"–í–∏–¥–µ–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä: {gpu.get('VideoProcessor', 'N/A')}\n\n")
                else:
                    f.write("--- –í–ò–î–ï–û–ö–ê–†–¢–´ (GPU) ---\n")
                    f.write("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n")
            
            return report_path
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            backup_path = "MyPC_Report.txt"
            with open(backup_path, 'w', encoding='utf-8') as f:
                f.write(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}\n")
            return backup_path
    
    def display_summary(self):
        """–í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        print("\n" + "="*50)
        print("üìã –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê –°–ò–°–¢–ï–ú–´")
        print("="*50)
        
        if 'cpu_info' in self.report_data and self.report_data['cpu_info']:
            cpu = self.report_data['cpu_info'][0]
            print(f"üíª –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {cpu.get('Name', 'N/A')}")
            print(f"   –Ø–¥—Ä–∞: {cpu.get('NumberOfCores', 'N/A')} —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö, {cpu.get('NumberOfLogicalProcessors', 'N/A')} –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö")
        else:
            print(f"üíª –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {platform.processor()}")
        
        if 'ram_info' in self.report_data and self.report_data['ram_info']:
            total_ram = sum(ram.get('Capacity_GB', 0) for ram in self.report_data['ram_info'])
            print(f"üß† –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: {total_ram} GB ({len(self.report_data['ram_info'])} –º–æ–¥—É–ª—è)")
        else:
            print("üß† –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        if 'disk_info' in self.report_data and self.report_data['disk_info']:
            total_disk = sum(disk.get('Size_GB', 0) for disk in self.report_data['disk_info'])
            print(f"üíæ –ù–∞–∫–æ–ø–∏—Ç–µ–ª–∏: {len(self.report_data['disk_info'])} —É—Å—Ç—Ä–æ–π—Å—Ç–≤, {total_disk} GB –≤—Å–µ–≥–æ")
        else:
            print("üíæ –ù–∞–∫–æ–ø–∏—Ç–µ–ª–∏: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        if 'gpu_info' in self.report_data and self.report_data['gpu_info']:
            gpu_names = [gpu.get('Name', 'N/A') for gpu in self.report_data['gpu_info']]
            print(f"üéÆ –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã: {', '.join(gpu_names)}")
        else:
            print("üéÆ –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        print(f"üõ°Ô∏è  –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {'‚úÖ –î–∞' if self.is_admin else '‚ö†Ô∏è –ù–µ—Ç'}")
    
    def analyze_system(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏—Å—Ç–µ–º—ã"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏—Å—Ç–µ–º—ã...")
        print(f"üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
        
        if not self.is_admin:
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            print("   –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n")
        
        self.get_general_info()
        self.get_cpu_info()
        self.get_ram_info()
        self.get_disk_info()
        self.get_gpu_info()
        
        report_path = self.generate_report()
        self.display_summary()
        
        print(f"\n‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
        print("üéØ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("System Analyzer - –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 40)
    
    try:
        analyzer = SystemAnalyzer()
        analyzer.analyze_system()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

if __name__ == "__main__":
    main()